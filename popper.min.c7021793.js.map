{"version":3,"sources":["../src/index.js","../src/utils/isBrowser.js","../src/utils/debounce.js","../src/utils/isFunction.js","../src/utils/getStyleComputedProperty.js","../src/utils/getParentNode.js","../src/utils/getScrollParent.js","../src/utils/getReferenceNode.js","../src/utils/isIE.js","../src/utils/getOffsetParent.js","../src/utils/isOffsetContainer.js","../src/utils/getRoot.js","../src/utils/findCommonOffsetParent.js","../src/utils/getScroll.js","../src/utils/includeScroll.js","../src/utils/getBordersSize.js","../src/utils/getWindowSizes.js","../src/utils/getClientRect.js","../src/utils/getBoundingClientRect.js","../src/utils/getOffsetRectRelativeToArbitraryNode.js","../src/utils/getViewportOffsetRectRelativeToArtbitraryNode.js","../src/utils/isFixed.js","../src/utils/getFixedPositionOffsetParent.js","../src/utils/getBoundaries.js","../src/utils/computeAutoPlacement.js","../src/utils/getReferenceOffsets.js","../src/utils/getOuterSizes.js","../src/utils/getOppositePlacement.js","../src/utils/getPopperOffsets.js","../src/utils/find.js","../src/utils/findIndex.js","../src/utils/runModifiers.js","../src/methods/update.js","../src/utils/isModifierEnabled.js","../src/utils/getSupportedPropertyName.js","../src/methods/destroy.js","../src/utils/getWindow.js","../src/utils/setupEventListeners.js","../src/methods/enableEventListeners.js","../src/utils/removeEventListeners.js","../src/methods/disableEventListeners.js","../src/utils/isNumeric.js","../src/utils/setStyles.js","../src/utils/setAttributes.js","../src/modifiers/applyStyle.js","../src/utils/getRoundedOffsets.js","../src/modifiers/computeStyle.js","../src/utils/isModifierRequired.js","../src/modifiers/arrow.js","../src/utils/getOppositeVariation.js","../src/methods/placements.js","../src/utils/clockwise.js","../src/modifiers/flip.js","../src/modifiers/keepTogether.js","../src/modifiers/offset.js","../src/modifiers/preventOverflow.js","../src/modifiers/shift.js","../src/modifiers/hide.js","../src/modifiers/inner.js","../src/modifiers/index.js","../src/methods/defaults.js"],"names":["Popper","window","document","navigator","longerTimeoutBrowsers","i","length","isBrowser","userAgent","indexOf","called","Promise","resolve","then","scheduled","supportsMicroTasks","functionToCheck","getType","toString","call","element","nodeType","css","ownerDocument","defaultView","getComputedStyle","property","nodeName","parentNode","host","body","overflow","overflowX","overflowY","getStyleComputedProperty","test","getScrollParent","getParentNode","reference","referenceNode","isIE11","MSInputMethodContext","documentMode","isIE10","version","documentElement","noOffsetParent","isIE","offsetParent","nextElementSibling","getOffsetParent","firstElementChild","node","getRoot","element1","element2","order","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","start","end","range","createRange","setStart","setEnd","commonAncestorContainer","contains","isOffsetContainer","element1root","findCommonOffsetParent","side","upperSide","html","scrollingElement","subtract","scrollTop","getScroll","scrollLeft","modifier","top","bottom","left","right","sideA","axis","sideB","parseFloat","styles","Math","max","parseInt","computedStyle","getSize","offsets","width","height","rect","getBoundingClientRect","result","sizes","getWindowSizes","clientWidth","clientHeight","horizScrollbar","offsetWidth","vertScrollbar","offsetHeight","getBordersSize","getClientRect","fixedPosition","runIsIE","isHTML","parent","childrenRect","parentRect","scrollParent","borderTopWidth","borderLeftWidth","marginTop","marginLeft","includeScroll","excludeScroll","relativeOffset","getOffsetRectRelativeToArbitraryNode","innerWidth","innerHeight","isFixed","parentElement","el","boundaries","getFixedPositionOffsetParent","getReferenceNode","boundariesElement","getViewportOffsetRectRelativeToArtbitraryNode","boundariesNode","popper","isPaddingNumber","padding","placement","getBoundaries","rects","refRect","sortedAreas","Object","keys","map","key","getArea","sort","b","area","a","filteredAreas","filter","computedPlacement","variation","split","x","marginBottom","y","marginRight","hash","replace","matched","popperRect","getOuterSizes","popperOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","referenceOffsets","getOppositePlacement","Array","prototype","find","arr","findIndex","cur","match","obj","modifiers","ends","slice","forEach","warn","fn","enabled","isFunction","data","state","isDestroyed","getReferenceOffsets","options","positionFixed","computeAutoPlacement","flip","originalPlacement","getPopperOffsets","position","runModifiers","isCreated","onUpdate","onCreate","some","name","prefixes","upperProp","charAt","toUpperCase","prefix","toCheck","style","isModifierEnabled","removeAttribute","willChange","getSupportedPropertyName","disableEventListeners","removeOnDestroy","removeChild","isBody","target","addEventListener","passive","push","updateBound","scrollElement","scrollParents","eventsEnabled","setupEventListeners","scheduleUpdate","removeEventListener","removeEventListeners","n","isNaN","isFinite","prop","unit","isNumeric","value","attributes","setAttribute","instance","arrowElement","arrowStyles","round","floor","noRound","v","referenceWidth","popperWidth","isVertical","isVariation","horizontalToInteger","verticalToInteger","bothOddWidth","isFirefox","legacyGpuAccelerationOption","gpuAcceleration","offsetParentRect","getRoundedOffsets","devicePixelRatio","prefixedProperty","invertTop","invertLeft","arrow","requesting","isRequired","requested","isModifierRequired","querySelector","len","sideCapitalized","toLowerCase","altSide","opSide","arrowElementSize","center","popperMarginSide","popperBorderSide","sideValue","min","validPlacements","placements","counter","index","concat","reverse","BEHAVIORS","flipped","placementOpposite","flipOrder","behavior","FLIP","CLOCKWISE","clockwise","COUNTERCLOCKWISE","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariationByRef","flipVariations","flippedVariationByContent","flipVariationsByContent","flippedVariation","getOppositeVariation","str","size","useHeight","fragments","offset","frag","trim","divider","search","splitRegex","ops","mergeWithPrevious","op","reduce","toValue","index2","basePlacement","parseOffset","transformProp","popperStyles","priority","check","escapeWithReference","shiftvariation","shiftOffsets","bound","hide","subtractLength","requestAnimationFrame","update","debounce","bind","Defaults","jquery","modifierOptions","onLoad","enableEventListeners","destroy","Utils","global","PopperUtils"],"mappings":"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","file":"popper.min.c7021793.js","sourceRoot":"../src","sourcesContent":["// Utils\nimport debounce from './utils/debounce';\nimport isFunction from './utils/isFunction';\n\n// Methods\nimport update from './methods/update';\nimport destroy from './methods/destroy';\nimport enableEventListeners from './methods/enableEventListeners';\nimport disableEventListeners from './methods/disableEventListeners';\nimport Defaults from './methods/defaults';\nimport placements from './methods/placements';\n\nexport default class Popper {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  constructor(reference, popper, options = {}) {\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = { ...Popper.Defaults, ...options };\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: [],\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys({\n      ...Popper.Defaults.modifiers,\n      ...options.modifiers,\n    }).forEach(name => {\n      this.options.modifiers[name] = {\n        // If it's a built-in modifier, use it as base\n        ...(Popper.Defaults.modifiers[name] || {}),\n        // If there are custom options, override and merge with default ones\n        ...(options.modifiers ? options.modifiers[name] : {}),\n      };\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers)\n      .map(name => ({\n        name,\n        ...this.options.modifiers[name],\n      }))\n      // sort the modifiers by order\n      .sort((a, b) => a.order - b.order);\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(modifierOptions => {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(\n          this.reference,\n          this.popper,\n          this.options,\n          modifierOptions,\n          this.state\n        );\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    const eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n  update() {\n    return update.call(this);\n  }\n  destroy() {\n    return destroy.call(this);\n  }\n  enableEventListeners() {\n    return enableEventListeners.call(this);\n  }\n  disableEventListeners() {\n    return disableEventListeners.call(this);\n  }\n\n  /**\n   * Schedules an update. It will run on the next UI update available.\n   * @method scheduleUpdate\n   * @memberof Popper\n   */\n  scheduleUpdate = () => requestAnimationFrame(this.update);\n\n  /**\n   * Collection of utilities useful when writing custom modifiers.\n   * Starting from version 1.7, this method is available only if you\n   * include `popper-utils.js` before `popper.js`.\n   *\n   * **DEPRECATION**: This way to access PopperUtils is deprecated\n   * and will be removed in v2! Use the PopperUtils module directly instead.\n   * Due to the high instability of the methods contained in Utils, we can't\n   * guarantee them to follow semver. Use them at your own risk!\n   * @static\n   * @private\n   * @type {Object}\n   * @deprecated since version 1.8\n   * @member Utils\n   * @memberof Popper\n   */\n  static Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\n\n  static placements = placements;\n\n  static Defaults = Defaults;\n}\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n","export default typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n","import isBrowser from './isBrowser';\n\nconst timeoutDuration = (function(){\n  const longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (let i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}());\n\nexport function microtaskDebounce(fn) {\n  let called = false\n  return () => {\n    if (called) {\n      return\n    }\n    called = true\n    window.Promise.resolve().then(() => {\n      called = false\n      fn()\n    })\n  }\n}\n\nexport function taskDebounce(fn) {\n  let scheduled = false;\n  return () => {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(() => {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nconst supportsMicroTasks = isBrowser && window.Promise\n\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nexport default (supportsMicroTasks\n  ? microtaskDebounce\n  : taskDebounce);\n","/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nexport default function isFunction(functionToCheck) {\n  const getType = {};\n  return (\n    functionToCheck &&\n    getType.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n","/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nexport default function getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  const window = element.ownerDocument.defaultView;\n  const css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n","/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nexport default function getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nexport default function getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body\n    case '#document':\n      return element.body\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(element);\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n","/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nexport default function getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n","import isBrowser from './isBrowser';\n\nconst isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nconst isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nexport default function isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nexport default function getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  const noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  let offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  const nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (\n    ['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 &&\n    getStyleComputedProperty(offsetParent, 'position') === 'static'\n  ) {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n","import getOffsetParent from './getOffsetParent';\n\nexport default function isOffsetContainer(element) {\n  const { nodeName } = element;\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return (\n    nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element\n  );\n}\n","/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nexport default function getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n","import isOffsetContainer from './isOffsetContainer';\nimport getRoot from './getRoot';\nimport getOffsetParent from './getOffsetParent';\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nexport default function findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  const order =\n    element1.compareDocumentPosition(element2) &\n    Node.DOCUMENT_POSITION_FOLLOWING;\n  const start = order ? element1 : element2;\n  const end = order ? element2 : element1;\n\n  // Get common ancestor container\n  const range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  const { commonAncestorContainer } = range;\n\n  // Both nodes are inside #document\n  if (\n    (element1 !== commonAncestorContainer &&\n      element2 !== commonAncestorContainer) ||\n    start.contains(end)\n  ) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  const element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n","/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nexport default function getScroll(element, side = 'top') {\n  const upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  const nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    const html = element.ownerDocument.documentElement;\n    const scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n","import getScroll from './getScroll';\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nexport default function includeScroll(rect, element, subtract = false) {\n  const scrollTop = getScroll(element, 'top');\n  const scrollLeft = getScroll(element, 'left');\n  const modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n","/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nexport default function getBordersSize(styles, axis) {\n  const sideA = axis === 'x' ? 'Left' : 'Top';\n  const sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return (\n    parseFloat(styles[`border${sideA}Width`]) +\n    parseFloat(styles[`border${sideB}Width`])\n  );\n}\n","import isIE from './isIE';\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(\n    body[`offset${axis}`],\n    body[`scroll${axis}`],\n    html[`client${axis}`],\n    html[`offset${axis}`],\n    html[`scroll${axis}`],\n    isIE(10)\n      ? (parseInt(html[`offset${axis}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`]))\n    : 0 \n  );\n}\n\nexport default function getWindowSizes(document) {\n  const body = document.body;\n  const html = document.documentElement;\n  const computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle),\n  };\n}\n","/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nexport default function getClientRect(offsets) {\n  return {\n    ...offsets,\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height,\n  };\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getBordersSize from './getBordersSize';\nimport getWindowSizes from './getWindowSizes';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\nimport isIE from './isIE';\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nexport default function getBoundingClientRect(element) {\n  let rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      const scrollTop = getScroll(element, 'top');\n      const scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    }\n    else {\n      rect = element.getBoundingClientRect();\n    }\n  }\n  catch(e){}\n\n  const result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top,\n  };\n\n  // subtract scrollbar size from sizes\n  const sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  const width =\n    sizes.width || element.clientWidth || result.width;\n  const height =\n    sizes.height || element.clientHeight || result.height;\n\n  let horizScrollbar = element.offsetWidth - width;\n  let vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    const styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport includeScroll from './includeScroll';\nimport getScrollParent from './getScrollParent';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport runIsIE from './isIE';\nimport getClientRect from './getClientRect';\n\nexport default function getOffsetRectRelativeToArbitraryNode(children, parent, fixedPosition = false) {\n  const isIE10 = runIsIE(10);\n  const isHTML = parent.nodeName === 'HTML';\n  const childrenRect = getBoundingClientRect(children);\n  const parentRect = getBoundingClientRect(parent);\n  const scrollParent = getScrollParent(children);\n\n  const styles = getStyleComputedProperty(parent);\n  const borderTopWidth = parseFloat(styles.borderTopWidth);\n  const borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if(fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  let offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height,\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    const marginTop = parseFloat(styles.marginTop);\n    const marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (\n    isIE10 && !fixedPosition\n      ? parent.contains(scrollParent)\n      : parent === scrollParent && scrollParent.nodeName !== 'BODY'\n  ) {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n","import getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\n\nexport default function getViewportOffsetRectRelativeToArtbitraryNode(element, excludeScroll = false) {\n  const html = element.ownerDocument.documentElement;\n  const relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  const width = Math.max(html.clientWidth, window.innerWidth || 0);\n  const height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  const scrollTop = !excludeScroll ? getScroll(html) : 0;\n  const scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  const offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width,\n    height,\n  };\n\n  return getClientRect(offset);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nexport default function isFixed(element) {\n  const nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  const parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nexport default function getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n   if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  let el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n\n}\n","import getScrollParent from './getScrollParent';\nimport getParentNode from './getParentNode';\nimport getReferenceNode from './getReferenceNode';\nimport findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getViewportOffsetRectRelativeToArtbitraryNode from './getViewportOffsetRectRelativeToArtbitraryNode';\nimport getWindowSizes from './getWindowSizes';\nimport isFixed from './isFixed';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nexport default function getBoundaries(\n  popper,\n  reference,\n  padding,\n  boundariesElement,\n  fixedPosition = false\n) {\n  // NOTE: 1 DOM access here\n\n  let boundaries = { top: 0, left: 0 };\n  const offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport' ) {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  }\n\n  else {\n    // Handle other cases based on DOM element used as boundaries\n    let boundariesNode;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    const offsets = getOffsetRectRelativeToArbitraryNode(\n      boundariesNode,\n      offsetParent,\n      fixedPosition\n    );\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      const { height, width } = getWindowSizes(popper.ownerDocument);\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  const isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0; \n  boundaries.top += isPaddingNumber ? padding : padding.top || 0; \n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0; \n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0; \n\n  return boundaries;\n}\n","import getBoundaries from '../utils/getBoundaries';\n\nfunction getArea({ width, height }) {\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeAutoPlacement(\n  placement,\n  refRect,\n  popper,\n  reference,\n  boundariesElement,\n  padding = 0\n) {\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  const boundaries = getBoundaries(\n    popper,\n    reference,\n    padding,\n    boundariesElement\n  );\n\n  const rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top,\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height,\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom,\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height,\n    },\n  };\n\n  const sortedAreas = Object.keys(rects)\n    .map(key => ({\n      key,\n      ...rects[key],\n      area: getArea(rects[key]),\n    }))\n    .sort((a, b) => b.area - a.area);\n\n  const filteredAreas = sortedAreas.filter(\n    ({ width, height }) =>\n      width >= popper.clientWidth && height >= popper.clientHeight\n  );\n\n  const computedPlacement = filteredAreas.length > 0\n    ? filteredAreas[0].key\n    : sortedAreas[0].key;\n\n  const variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? `-${variation}` : '');\n}\n","import findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\nimport getReferenceNode from './getReferenceNode';\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nexport default function getReferenceOffsets(state, popper, reference, fixedPosition = null) {\n  const commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n","/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nexport default function getOuterSizes(element) {\n  const window = element.ownerDocument.defaultView;\n  const styles = window.getComputedStyle(element);\n  const x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  const y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  const result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x,\n  };\n  return result;\n}\n","/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nexport default function getOppositePlacement(placement) {\n  const hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, matched => hash[matched]);\n}\n","import getOuterSizes from './getOuterSizes';\nimport getOppositePlacement from './getOppositePlacement';\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nexport default function getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  const popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  const popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height,\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  const isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  const mainSide = isHoriz ? 'top' : 'left';\n  const secondarySide = isHoriz ? 'left' : 'top';\n  const measurement = isHoriz ? 'height' : 'width';\n  const secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] =\n    referenceOffsets[mainSide] +\n    referenceOffsets[measurement] / 2 -\n    popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] =\n      referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] =\n      referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n","/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n","import find from './find';\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(cur => cur[prop] === value);\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  const match = find(arr, obj => obj[prop] === value);\n  return arr.indexOf(match);\n}\n","import isFunction from './isFunction';\nimport findIndex from './findIndex';\nimport getClientRect from '../utils/getClientRect';\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nexport default function runModifiers(modifiers, data, ends) {\n  const modifiersToRun = ends === undefined\n    ? modifiers\n    : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(modifier => {\n    if (modifier['function']) { // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    const fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n","import computeAutoPlacement from '../utils/computeAutoPlacement';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nexport default function update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  let data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {},\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(\n    this.state,\n    this.popper,\n    this.reference,\n    this.options.positionFixed\n  );\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(\n    this.options.placement,\n    data.offsets.reference,\n    this.popper,\n    this.reference,\n    this.options.modifiers.flip.boundariesElement,\n    this.options.modifiers.flip.padding\n  );\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(\n    this.popper,\n    data.offsets.reference,\n    data.placement\n  );\n\n  data.offsets.popper.position = this.options.positionFixed\n    ? 'fixed'\n    : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n","/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nexport default function isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(\n    ({ name, enabled }) => enabled && name === modifierName\n  );\n}\n","/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nexport default function getSupportedPropertyName(property) {\n  const prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  const upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefix = prefixes[i];\n    const toCheck = prefix ? `${prefix}${upperProp}` : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n","import isModifierEnabled from '../utils/isModifierEnabled';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nexport default function destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n","/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nexport default function getWindow(element) {\n  const ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n","import getScrollParent from './getScrollParent';\nimport getWindow from './getWindow';\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  const isBody = scrollParent.nodeName === 'BODY';\n  const target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(\n      getScrollParent(target.parentNode),\n      event,\n      callback,\n      scrollParents\n    );\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function setupEventListeners(\n  reference,\n  options,\n  state,\n  updateBound\n) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  const scrollElement = getScrollParent(reference);\n  attachToScrollParents(\n    scrollElement,\n    'scroll',\n    state.updateBound,\n    state.scrollParents\n  );\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n","import setupEventListeners from '../utils/setupEventListeners';\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nexport default function enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(\n      this.reference,\n      this.options,\n      this.state,\n      this.scheduleUpdate\n    );\n  }\n}\n","import getWindow from './getWindow';\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(target => {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n","import removeEventListeners from '../utils/removeEventListeners';\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nexport default function disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n","/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nexport default function isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n","import isNumeric from './isNumeric';\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setStyles(element, styles) {\n  Object.keys(styles).forEach(prop => {\n    let unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (\n      ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !==\n        -1 &&\n      isNumeric(styles[prop])\n    ) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n","/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function(prop) {\n    const value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n","import setStyles from '../utils/setStyles';\nimport setAttributes from '../utils/setAttributes';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nexport default function applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nexport function applyStyleOnLoad(\n  reference,\n  popper,\n  options,\n  modifierOptions,\n  state\n) {\n  // compute reference element offsets\n  const referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  const placement = computeAutoPlacement(\n    options.placement,\n    referenceOffsets,\n    popper,\n    reference,\n    options.modifiers.flip.boundariesElement,\n    options.modifiers.flip.padding\n  );\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n","/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nexport default function getRoundedOffsets(data, shouldRound) {\n  const { popper, reference } = data.offsets;\n  const { round, floor } = Math;\n  const noRound = v => v;\n  \n  const referenceWidth = round(reference.width);\n  const popperWidth = round(popper.width);\n  \n  const isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  const isVariation = data.placement.indexOf('-') !== -1;\n  const sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  const bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  const horizontalToInteger = !shouldRound\n    ? noRound\n    : isVertical || isVariation || sameWidthParity\n    ? round\n    : floor;\n  const verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(\n      bothOddWidth && !isVariation && shouldRound\n        ? popper.left - 1\n        : popper.left\n    ),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right),\n  };\n}\n","import getSupportedPropertyName from '../utils/getSupportedPropertyName';\nimport find from '../utils/find';\nimport getOffsetParent from '../utils/getOffsetParent';\nimport getBoundingClientRect from '../utils/getBoundingClientRect';\nimport getRoundedOffsets from '../utils/getRoundedOffsets';\nimport isBrowser from '../utils/isBrowser';\n\nconst isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeStyle(data, options) {\n  const { x, y } = options;\n  const { popper } = data.offsets;\n\n  // Remove this legacy support in Popper.js v2\n  const legacyGpuAccelerationOption = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'applyStyle'\n  ).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn(\n      'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!'\n    );\n  }\n  const gpuAcceleration =\n    legacyGpuAccelerationOption !== undefined\n      ? legacyGpuAccelerationOption\n      : options.gpuAcceleration;\n\n  const offsetParent = getOffsetParent(data.instance.popper);\n  const offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  const styles = {\n    position: popper.position,\n  };\n\n  const offsets = getRoundedOffsets(\n    data,\n    window.devicePixelRatio < 2 || !isFirefox\n  );\n\n  const sideA = x === 'bottom' ? 'top' : 'bottom';\n  const sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  const prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  let left, top;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = `translate3d(${left}px, ${top}px, 0)`;\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    const invertTop = sideA === 'bottom' ? -1 : 1;\n    const invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = `${sideA}, ${sideB}`;\n  }\n\n  // Attributes\n  const attributes = {\n    'x-placement': data.placement,\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = { ...attributes, ...data.attributes };\n  data.styles = { ...styles, ...data.styles };\n  data.arrowStyles = { ...data.offsets.arrow, ...data.arrowStyles };\n\n  return data;\n}\n","import find from './find';\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nexport default function isModifierRequired(\n  modifiers,\n  requestingName,\n  requestedName\n) {\n  const requesting = find(modifiers, ({ name }) => name === requestingName);\n\n  const isRequired =\n    !!requesting &&\n    modifiers.some(modifier => {\n      return (\n        modifier.name === requestedName &&\n        modifier.enabled &&\n        modifier.order < requesting.order\n      );\n    });\n\n  if (!isRequired) {\n    const requesting = `\\`${requestingName}\\``;\n    const requested = `\\`${requestedName}\\``;\n    console.warn(\n      `${requested} modifier is required by ${requesting} modifier in order to work, be sure to include it before ${requesting}!`\n    );\n  }\n  return isRequired;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOuterSizes from '../utils/getOuterSizes';\nimport isModifierRequired from '../utils/isModifierRequired';\nimport getStyleComputedProperty from '../utils/getStyleComputedProperty';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  let arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn(\n        'WARNING: `arrow.element` must be child of its popper element!'\n      );\n      return data;\n    }\n  }\n\n  const placement = data.placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  const len = isVertical ? 'height' : 'width';\n  const sideCapitalized = isVertical ? 'Top' : 'Left';\n  const side = sideCapitalized.toLowerCase();\n  const altSide = isVertical ? 'left' : 'top';\n  const opSide = isVertical ? 'bottom' : 'right';\n  const arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -=\n      popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] +=\n      reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  const center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  const css = getStyleComputedProperty(data.instance.popper);\n  const popperMarginSide = parseFloat(css[`margin${sideCapitalized}`]);\n  const popperBorderSide = parseFloat(css[`border${sideCapitalized}Width`]);\n  let sideValue =\n    center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {\n    [side]: Math.round(sideValue),\n    [altSide]: '', // make sure to unset any eventual altSide value from the DOM node\n  };\n\n  return data;\n}\n","/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nexport default function getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n","/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nexport default [\n  'auto-start',\n  'auto',\n  'auto-end',\n  'top-start',\n  'top',\n  'top-end',\n  'right-start',\n  'right',\n  'right-end',\n  'bottom-end',\n  'bottom',\n  'bottom-start',\n  'left-end',\n  'left',\n  'left-start',\n];\n","import placements from '../methods/placements';\n\n// Get rid of `auto` `auto-start` and `auto-end`\nconst validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nexport default function clockwise(placement, counter = false) {\n  const index = validPlacements.indexOf(placement);\n  const arr = validPlacements\n    .slice(index + 1)\n    .concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n","import getOppositePlacement from '../utils/getOppositePlacement';\nimport getOppositeVariation from '../utils/getOppositeVariation';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\nimport getBoundaries from '../utils/getBoundaries';\nimport isModifierEnabled from '../utils/isModifierEnabled';\nimport clockwise from '../utils/clockwise';\n\nconst BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise',\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    options.boundariesElement,\n    data.positionFixed\n  );\n\n  let placement = data.placement.split('-')[0];\n  let placementOpposite = getOppositePlacement(placement);\n  let variation = data.placement.split('-')[1] || '';\n\n  let flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach((step, index) => {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    const popperOffsets = data.offsets.popper;\n    const refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    const floor = Math.floor;\n    const overlapsRef =\n      (placement === 'left' &&\n        floor(popperOffsets.right) > floor(refOffsets.left)) ||\n      (placement === 'right' &&\n        floor(popperOffsets.left) < floor(refOffsets.right)) ||\n      (placement === 'top' &&\n        floor(popperOffsets.bottom) > floor(refOffsets.top)) ||\n      (placement === 'bottom' &&\n        floor(popperOffsets.top) < floor(refOffsets.bottom));\n\n    const overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    const overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    const overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    const overflowsBottom =\n      floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    const overflowsBoundaries =\n      (placement === 'left' && overflowsLeft) ||\n      (placement === 'right' && overflowsRight) ||\n      (placement === 'top' && overflowsTop) ||\n      (placement === 'bottom' && overflowsBottom);\n\n    // flip the variation if required\n    const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    const flippedVariationByRef =\n      !!options.flipVariations &&\n      ((isVertical && variation === 'start' && overflowsLeft) ||\n        (isVertical && variation === 'end' && overflowsRight) ||\n        (!isVertical && variation === 'start' && overflowsTop) ||\n        (!isVertical && variation === 'end' && overflowsBottom));\n\n    // flips variation if popper content overflows boundaries\n    const flippedVariationByContent =\n      !!options.flipVariationsByContent &&\n      ((isVertical && variation === 'start' && overflowsRight) ||\n        (isVertical && variation === 'end' && overflowsLeft) ||\n        (!isVertical && variation === 'start' && overflowsBottom) ||\n        (!isVertical && variation === 'end' && overflowsTop));\n\n    const flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = {\n        ...data.offsets.popper,\n        ...getPopperOffsets(\n          data.instance.popper,\n          data.offsets.reference,\n          data.placement\n        ),\n      };\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function keepTogether(data) {\n  const { popper, reference } = data.offsets;\n  const placement = data.placement.split('-')[0];\n  const floor = Math.floor;\n  const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  const side = isVertical ? 'right' : 'bottom';\n  const opSide = isVertical ? 'left' : 'top';\n  const measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] =\n      floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n","import isNumeric from '../utils/isNumeric';\nimport getClientRect from '../utils/getClientRect';\nimport find from '../utils/find';\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nexport function toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  const split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  const value = +split[1];\n  const unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    let element;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    const rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    let size;\n    if (unit === 'vh') {\n      size = Math.max(\n        document.documentElement.clientHeight,\n        window.innerHeight || 0\n      );\n    } else {\n      size = Math.max(\n        document.documentElement.clientWidth,\n        window.innerWidth || 0\n      );\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nexport function parseOffset(\n  offset,\n  popperOffsets,\n  referenceOffsets,\n  basePlacement\n) {\n  const offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  const useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  const fragments = offset.split(/(\\+|\\-)/).map(frag => frag.trim());\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  const divider = fragments.indexOf(\n    find(fragments, frag => frag.search(/,|\\s/) !== -1)\n  );\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn(\n      'Offsets separated by white space(s) are deprecated, use a comma (,) instead.'\n    );\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  const splitRegex = /\\s*,\\s*|\\s+/;\n  let ops = divider !== -1\n    ? [\n        fragments\n          .slice(0, divider)\n          .concat([fragments[divider].split(splitRegex)[0]]),\n        [fragments[divider].split(splitRegex)[1]].concat(\n          fragments.slice(divider + 1)\n        ),\n      ]\n    : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map((op, index) => {\n    // Most of the units rely on the orientation of the popper\n    const measurement = (index === 1 ? !useHeight : useHeight)\n      ? 'height'\n      : 'width';\n    let mergeWithPrevious = false;\n    return (\n      op\n        // This aggregates any `+` or `-` sign that aren't considered operators\n        // e.g.: 10 + +5 => [10, +, +5]\n        .reduce((a, b) => {\n          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n            a[a.length - 1] = b;\n            mergeWithPrevious = true;\n            return a;\n          } else if (mergeWithPrevious) {\n            a[a.length - 1] += b;\n            mergeWithPrevious = false;\n            return a;\n          } else {\n            return a.concat(b);\n          }\n        }, [])\n        // Here we convert the string values into number values (in px)\n        .map(str => toValue(str, measurement, popperOffsets, referenceOffsets))\n    );\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach((op, index) => {\n    op.forEach((frag, index2) => {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nexport default function offset(data, { offset }) {\n  const { placement, offsets: { popper, reference } } = data;\n  const basePlacement = placement.split('-')[0];\n\n  let offsets;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n","import getOffsetParent from '../utils/getOffsetParent';\nimport getBoundaries from '../utils/getBoundaries';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function preventOverflow(data, options) {\n  let boundariesElement =\n    options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  const transformProp = getSupportedPropertyName('transform');\n  const popperStyles = data.instance.popper.style; // assignment to help minification\n  const { top, left, [transformProp]: transform } = popperStyles;\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    boundariesElement,\n    data.positionFixed\n  );\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  const order = options.priority;\n  let popper = data.offsets.popper;\n\n  const check = {\n    primary(placement) {\n      let value = popper[placement];\n      if (\n        popper[placement] < boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return { [placement]: value };\n    },\n    secondary(placement) {\n      const mainSide = placement === 'right' ? 'left' : 'top';\n      let value = popper[mainSide];\n      if (\n        popper[placement] > boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.min(\n          popper[mainSide],\n          boundaries[placement] -\n            (placement === 'right' ? popper.width : popper.height)\n        );\n      }\n      return { [mainSide]: value };\n    },\n  };\n\n  order.forEach(placement => {\n    const side =\n      ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = { ...popper, ...check[side](placement) };\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function shift(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    const { reference, popper } = data.offsets;\n    const isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    const side = isVertical ? 'left' : 'top';\n    const measurement = isVertical ? 'width' : 'height';\n\n    const shiftOffsets = {\n      start: { [side]: reference[side] },\n      end: {\n        [side]: reference[side] + reference[measurement] - popper[measurement],\n      },\n    };\n\n    data.offsets.popper = { ...popper, ...shiftOffsets[shiftvariation] };\n  }\n\n  return data;\n}\n","import isModifierRequired from '../utils/isModifierRequired';\nimport find from '../utils/find';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  const refRect = data.offsets.reference;\n  const bound = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'preventOverflow'\n  ).boundaries;\n\n  if (\n    refRect.bottom < bound.top ||\n    refRect.left > bound.right ||\n    refRect.top > bound.bottom ||\n    refRect.right < bound.left\n  ) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOppositePlacement from '../utils/getOppositePlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function inner(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  const subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] =\n    reference[basePlacement] -\n    (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n","import applyStyle, { applyStyleOnLoad } from './applyStyle';\nimport computeStyle from './computeStyle';\nimport arrow from './arrow';\nimport flip from './flip';\nimport keepTogether from './keepTogether';\nimport offset from './offset';\nimport preventOverflow from './preventOverflow';\nimport shift from './shift';\nimport hide from './hide';\nimport inner from './inner';\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nexport default {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift,\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0,\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent',\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether,\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]',\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false,\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner,\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide,\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right',\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined,\n  },\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n","import modifiers from '../modifiers/index';\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nexport default {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: () => {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: () => {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers,\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n"]}